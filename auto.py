import time
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import random

def check_internet(url="https://www.google.com"):
    try:
        requests.get(url, timeout=2)
        return True
    except requests.ConnectionError:
        return False

def clear_browser_data(driver):
    """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cookies ‡πÅ‡∏•‡∏∞ localStorage"""
    try:
        driver.delete_all_cookies()
        driver.execute_script("window.localStorage.clear();")
        driver.execute_script("window.sessionStorage.clear();")
        print("üßπ Cleared browser data")
    except Exception as e:
        print(f"‚ö†Ô∏è Error clearing data: {e}")

def create_driver_with_new_session():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á driver ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° user agent ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°"""
    chrome_options = Options()
    # chrome_options.add_argument("--headless")  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--incognito")  # ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î incognito
    chrome_options.add_argument("--disable-logging")
    chrome_options.add_argument("--disable-background-timer-throttling")
    chrome_options.add_argument("--disable-backgrounding-occluded-windows")
    chrome_options.add_argument("--disable-renderer-backgrounding")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_experimental_option("detach", True)
    
    # ‡∏™‡∏∏‡πà‡∏° User Agent
    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0"
    ]
    chrome_options.add_argument(f"--user-agent={random.choice(user_agents)}")
    
    # ‡πÉ‡∏ä‡πâ temporary profile ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏° timestamp
    import tempfile
    import os
    temp_dir = tempfile.mkdtemp(prefix="chrome_profile_")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° proxy settings (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    # chrome_options.add_argument("--proxy-server=socks5://127.0.0.1:1080")
    
    service = Service('chromedriver.exe')
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö webdriver ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    driver.execute_script("Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})")
    driver.execute_script("Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en', 'th']})")
    
    return driver

def submit_survey():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö submit survey"""
    driver = None
    try:
        driver = create_driver_with_new_session()
        wait = WebDriverWait(driver, 20)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏õ‡πá‡∏ô 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        print("üåê Opening survey page...")
        driver.get("https://plan.rmu.ac.th/survey/")
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        time.sleep(3)
        
        # ‡∏•‡∏≠‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        clear_browser_data(driver)
        
        # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
        print("üîÑ Refreshing page...")
        driver.refresh()
        time.sleep(5)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
        
        print("üìù Filling out survey...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ form elements ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        try:
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ form ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'label[for="answerer2"]')))
            
            # ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å answerer2
            answerer_element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'label[for="answerer2"]')))
            driver.execute_script("arguments[0].scrollIntoView(true);", answerer_element)
            time.sleep(0.5)
            driver.execute_script("arguments[0].click();", answerer_element)
            print("‚úÖ Selected answerer2")
            time.sleep(1)
            
            # ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å department19
            dept_element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'label[for="department19"]')))
            driver.execute_script("arguments[0].scrollIntoView(true);", dept_element)
            time.sleep(0.5)
            driver.execute_script("arguments[0].click();", dept_element)
            print("‚úÖ Selected department19")
            time.sleep(1)

            # ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å star51 ‡∏ñ‡∏∂‡∏á star517
            success_count = 0
            for i in range(1, 18):
                label_for = f"star5{i}"
                try:
                    element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, f'label[for="{label_for}"]')))
                    driver.execute_script("arguments[0].scrollIntoView(true);", element)
                    time.sleep(0.3)
                    driver.execute_script("arguments[0].click();", element)
                    success_count += 1
                    time.sleep(0.5)
                except Exception as e:
                    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö {label_for} ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
            
            print(f"‚úÖ Successfully clicked {success_count}/17 star elements")
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô submit
            time.sleep(2)
            
            # ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Submit
            try:
                submit_btn = wait.until(EC.element_to_be_clickable((By.ID, "submitanswer")))
                driver.execute_script("arguments[0].scrollIntoView(true);", submit_btn)
                time.sleep(1)
                driver.execute_script("arguments[0].click();", submit_btn)
                print("‚úÖ Clicked submit button!")
                
                # ‡∏£‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ alert ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
                time.sleep(3)
                
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ alert ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    alert = WebDriverWait(driver, 5).until(EC.alert_is_present())
                    alert_text = alert.text
                    print(f"üîî Alert detected: {alert_text}")
                    
                    # ‡∏ñ‡πâ‡∏≤ alert ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    if "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì" in alert_text or "thank" in alert_text.lower() or "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" in alert_text:
                        alert.accept()  # ‡∏Å‡∏î OK
                        print("‚úÖ Form submitted successfully! (Alert confirmed)")
                        time.sleep(2)
                        return True
                    else:
                        alert.accept()  # ‡∏Å‡∏î OK ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                        print(f"‚ö†Ô∏è Unknown alert message: {alert_text}")
                        return False
                        
                except Exception as alert_error:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ alert ‡∏´‡∏£‡∏∑‡∏≠ timeout
                    print("‚ÑπÔ∏è No alert detected, checking page content...")
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å page content
                    try:
                        time.sleep(2)
                        page_source = driver.page_source.lower()
                        current_url = driver.current_url
                        
                        if "success" in page_source or "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" in page_source or "complete" in page_source or "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì" in page_source:
                            print("‚úÖ Form submitted successfully! (Page content confirmed)")
                            return True
                        elif "error" in page_source or "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" in page_source:
                            print("‚ùå Form submission error detected in page")
                            return False
                        else:
                            print("‚úÖ Form appears to be submitted (assuming success)")
                            return True
                    except Exception as page_check_error:
                        print(f"‚ö†Ô∏è Could not verify submission status: {page_check_error}")
                        return True  # Assume success if we can't verify
                
            except Exception as e:
                error_msg = str(e)
                # ‡∏ñ‡πâ‡∏≤ error message ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì" ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ submit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                if "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì" in error_msg or "thank" in error_msg.lower():
                    print("‚úÖ Form submitted successfully! (Success detected in error message)")
                    try:
                        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏õ‡∏¥‡∏î alert ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                        alert = driver.switch_to.alert
                        alert.accept()
                    except:
                        pass
                    return True
                else:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Submit ‡πÑ‡∏î‡πâ: {e}")
                    return False
                
        except Exception as e:
            print(f"‚ùå Error finding form elements: {e}")
            return False

    except Exception as e:
        print(f"‚ùå Error during survey submission: {e}")
        return False
    
    finally:
        if driver:
            try:
                driver.quit()
            except:
                pass

def checklist():
    submission_count = 0
    consecutive_failures = 0
    
    while True:
        if not check_internet():
            print("‚ùå No internet. Waiting...")
            time.sleep(10)
            continue
        
        print(f"\nüöÄ Starting submission attempt #{submission_count + 1}")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£ fail ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
        if consecutive_failures > 0:
            extra_wait = min(consecutive_failures * 30, 180)  # ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏ô‡∏≤‡∏ó‡∏µ
            print(f"‚ö†Ô∏è Previous attempts failed. Adding extra wait: {extra_wait} seconds")
            time.sleep(extra_wait)
        
        success = submit_survey()
        
        if success:
            submission_count += 1
            consecutive_failures = 0  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï counter
            print(f"üéâ Successfully submitted survey #{submission_count}")
            
            # ‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ submit ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏•‡∏á‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡πâ‡∏≤‡∏° rate limit ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß)
            wait_time = random.randint(30, 60)  # ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ - 1 ‡∏ô‡∏≤‡∏ó‡∏µ
            print(f"‚è≥ Waiting {wait_time} seconds before next attempt...")
            time.sleep(wait_time)
        else:
            consecutive_failures += 1
            print(f"üí• Submission failed ({consecutive_failures} consecutive failures)")
            
            # ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ retry
            wait_time = random.randint(30, 60)  # ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ - 1 ‡∏ô‡∏≤‡∏ó‡∏µ
            print(f"‚è≥ Waiting {wait_time} seconds before retry...")
            time.sleep(wait_time)
            
            # ‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
            if consecutive_failures >= 5:
                print("üõë Too many consecutive failures. Taking a longer break...")
                time.sleep(300)  # ‡∏£‡∏≠ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
                consecutive_failures = 0  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï counter

if __name__ == "__main__":
    checklist()